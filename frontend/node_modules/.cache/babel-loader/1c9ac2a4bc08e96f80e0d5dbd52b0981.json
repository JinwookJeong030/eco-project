{"ast":null,"code":"import { createAction, handleActions } from \"redux-actions\";\nimport createRequestSaga, { createRequestActionTypes } from \"../lib/createRequestSaga\";\nimport * as postsAPI from '../lib/api/post';\nimport { takeLatest } from 'redux-saga/effects';\nconst INITIALIZE = 'replys/INITIALIZE';\nconst CHANGE_FIELD = 'replys/CHANGE_FIELD';\nconst [LIST_REPLYS, LIST_REPLYS_SUCCESS, LIST_REPLYS_FAILURE] = createRequestActionTypes('replys/LIST_POSTS');\nconst [WRITE_REPLY, WRITE_REPLY_SUCCESS, WRITE_REPLY_FAILURE] = createRequestActionTypes('replys/WRITE_REPLYS');\nconst UNLOAD_REPLYS = 'replys/UNLOAD_REPLYS'; // 포스트 페이지에서 벗어날 때 데이터 비우기\n\nexport const initialize = createAction(INITIALIZE);\nexport const listReplys = createAction(LIST_REPLYS, id => id);\nexport const changeField = createAction(CHANGE_FIELD, _ref => {\n  let {\n    key,\n    value\n  } = _ref;\n  return {\n    key,\n    value\n  };\n});\nexport const unloadReplys = createAction(UNLOAD_REPLYS);\nexport const writeReply = createAction(WRITE_REPLY, _ref2 => {\n  let {\n    reply_post,\n    reply_contents,\n    reply_type,\n    reply_order,\n    reply_group_id\n  } = _ref2;\n  return {\n    reply_post,\n    reply_contents,\n    reply_type,\n    reply_order,\n    reply_group_id\n  };\n});\nconst writeReplySaga = createRequestSaga(WRITE_REPLY, postsAPI.writeReply);\nconst listReplysSaga = createRequestSaga(LIST_REPLYS, postsAPI.listReplys);\nexport function* replysSaga() {\n  yield takeLatest(LIST_REPLYS, listReplysSaga);\n  yield takeLatest(WRITE_REPLY, writeReplySaga);\n}\nconst initialState = {\n  addReplyState: null,\n  addIndex: null,\n  reply_contents: null,\n  reply_add_contents: null,\n  reply_type: 0,\n  reply_order: 0,\n  reply_group_id: 0,\n  reply: null,\n  replyError: null,\n  replys: null,\n  replysError: null\n};\n\nconst setReplyList = replys => {\n  let arrReplys = replys;\n\n  if (arrReplys && !(arrReplys[arrReplys.length - 1].reply_type === 2)) {\n    arrReplys.push({\n      reply_id: 0,\n      reply_type: 2,\n      reply_group_id: arrReplys[arrReplys.length - 1].reply_group_id + 1\n    });\n  }\n\n  return arrReplys;\n};\n\nconst replys = handleActions({\n  [CHANGE_FIELD]: (state, _ref3) => {\n    let {\n      payload: {\n        key,\n        value\n      }\n    } = _ref3;\n    return { ...state,\n      [key]: value // 특정 key 값을 업데이트\n\n    };\n  },\n  [LIST_REPLYS_SUCCESS]: (state, _ref4) => {\n    let {\n      payload: replys\n    } = _ref4;\n    return { ...state,\n      replys: setReplyList(replys.result.replys)\n    };\n  },\n  [LIST_REPLYS_FAILURE]: (state, _ref5) => {\n    let {\n      payload: error\n    } = _ref5;\n    return { ...state,\n      error\n    };\n  },\n  [WRITE_REPLY]: state => ({ ...state,\n    reply: null,\n    replyError: null\n  }),\n  [WRITE_REPLY_SUCCESS]: (state, _ref6) => {\n    let {\n      payload: reply\n    } = _ref6;\n    return { ...state,\n      reply\n    };\n  },\n  [WRITE_REPLY_FAILURE]: (state, _ref7) => {\n    let {\n      payload: replyError\n    } = _ref7;\n    return { ...state,\n      replyError\n    };\n  },\n  [UNLOAD_REPLYS]: () => initialState\n}, initialState);\nexport default replys;","map":{"version":3,"names":["createAction","handleActions","createRequestSaga","createRequestActionTypes","postsAPI","takeLatest","INITIALIZE","CHANGE_FIELD","LIST_REPLYS","LIST_REPLYS_SUCCESS","LIST_REPLYS_FAILURE","WRITE_REPLY","WRITE_REPLY_SUCCESS","WRITE_REPLY_FAILURE","UNLOAD_REPLYS","initialize","listReplys","id","changeField","key","value","unloadReplys","writeReply","reply_post","reply_contents","reply_type","reply_order","reply_group_id","writeReplySaga","listReplysSaga","replysSaga","initialState","addReplyState","addIndex","reply_add_contents","reply","replyError","replys","replysError","setReplyList","arrReplys","length","push","reply_id","state","payload","result","error"],"sources":["D:/GitHub/Capstone/eco-project/frontend/src/modules/replys.js"],"sourcesContent":["import { createAction, handleActions } from \"redux-actions\";\r\nimport createRequestSaga, {\r\n  createRequestActionTypes,\r\n} from \"../lib/createRequestSaga\";\r\nimport * as postsAPI from '../lib/api/post';\r\nimport { takeLatest } from 'redux-saga/effects';\r\n\r\nconst INITIALIZE = 'replys/INITIALIZE'; \r\nconst CHANGE_FIELD = 'replys/CHANGE_FIELD';\r\nconst [\r\n  LIST_REPLYS,\r\n  LIST_REPLYS_SUCCESS,\r\n  LIST_REPLYS_FAILURE,\r\n] = createRequestActionTypes('replys/LIST_POSTS');\r\n\r\n\r\nconst [\r\n  WRITE_REPLY,\r\n  WRITE_REPLY_SUCCESS,\r\n  WRITE_REPLY_FAILURE,\r\n] = createRequestActionTypes('replys/WRITE_REPLYS');\r\n\r\n\r\nconst UNLOAD_REPLYS = 'replys/UNLOAD_REPLYS'; // 포스트 페이지에서 벗어날 때 데이터 비우기\r\n\r\nexport const initialize = createAction(INITIALIZE);\r\nexport const listReplys = createAction(\r\n    LIST_REPLYS, id=>id\r\n);\r\n\r\nexport const changeField = createAction(CHANGE_FIELD, ({ key, value }) => ({\r\n  key,\r\n  value,\r\n}));\r\n\r\nexport const unloadReplys = createAction(UNLOAD_REPLYS);\r\nexport const writeReply = createAction(WRITE_REPLY, ({ reply_post, reply_contents,reply_type, reply_order,reply_group_id }) => ({\r\n  reply_post,\r\n  reply_contents,\r\n  reply_type,\r\n  reply_order,\r\n  reply_group_id\r\n}));\r\n\r\nconst writeReplySaga = createRequestSaga(WRITE_REPLY, postsAPI.writeReply);\r\nconst listReplysSaga = createRequestSaga(LIST_REPLYS, postsAPI.listReplys);\r\nexport function* replysSaga() {\r\n  yield takeLatest(LIST_REPLYS, listReplysSaga);\r\n  yield takeLatest(WRITE_REPLY,writeReplySaga);\r\n}\r\n\r\nconst initialState = {\r\n  addReplyState: null,\r\n  addIndex: null,\r\n  reply_contents: null,\r\n  reply_add_contents:null,\r\n  reply_type: 0,\r\n  reply_order: 0,\r\n  reply_group_id: 0,\r\n  reply:null,\r\n  replyError:null,\r\n  replys: null,\r\n  replysError: null,\r\n \r\n};\r\nconst setReplyList =(replys)=>{\r\n  let arrReplys = replys;\r\n \r\n  if(arrReplys&&!(arrReplys[arrReplys.length - 1].reply_type===2)){arrReplys.push({reply_id:0, reply_type: 2, \r\n    reply_group_id:arrReplys[arrReplys.length-1].reply_group_id+1});\r\n  }\r\n  return arrReplys;\r\n\r\n}\r\n\r\nconst replys = handleActions(\r\n  {\r\n\r\n    [CHANGE_FIELD]:(state, { payload: { key, value } }) => ({\r\n      ...state,\r\n      [key]: value, // 특정 key 값을 업데이트\r\n    }),\r\n    [LIST_REPLYS_SUCCESS]: (state, { payload: replys }) => ({\r\n      ...state,\r\n      replys: setReplyList(replys.result.replys)\r\n      \r\n      \r\n      ,\r\n    }),\r\n    [LIST_REPLYS_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      error,\r\n    }),\r\n    [WRITE_REPLY]: state => ({\r\n      ...state,\r\n      reply: null,\r\n      replyError: null,\r\n    }),\r\n    [WRITE_REPLY_SUCCESS]: (state, { payload: reply }) => ({\r\n      ...state,\r\n      reply,\r\n    }),\r\n\r\n    [WRITE_REPLY_FAILURE]: (state, { payload: replyError }) => ({\r\n      ...state,\r\n      replyError,\r\n    }),\r\n\r\n\r\n    [UNLOAD_REPLYS]: () => initialState,\r\n    \r\n  },\r\n  initialState,\r\n);\r\n\r\nexport default replys;"],"mappings":"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"},"metadata":{},"sourceType":"module"}