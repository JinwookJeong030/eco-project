{"ast":null,"code":"import { createAction, handleActions } from \"redux-actions\";\nimport createRequestSaga, { createRequestActionTypes } from \"../lib/createRequestSaga\";\nimport * as postsAPI from '../lib/api/post';\nimport { takeLatest } from 'redux-saga/effects';\nconst [LIST_REPLYS, LIST_REPLYS_SUCCESS, LIST_REPLYS_FAILURE] = createRequestActionTypes('replys/LIST_POSTS');\nexport const listReplys = createAction(LIST_REPLYS, _ref => {\n  let {\n    user_name,\n    page\n  } = _ref;\n  return {\n    user_name,\n    page\n  };\n});\nconst listReplysSaga = createRequestSaga(LIST_REPLYS, postsAPI.listReplys);\nexport function* replysSaga() {\n  yield takeLatest(LIST_REPLYS, listReplysSaga);\n}\nconst initialState = {\n  replys: null,\n  error: null\n};\nconst replys = handleActions({\n  [LIST_REPLYS_SUCCESS]: (state, _ref2) => {\n    let {\n      payload: replys\n    } = _ref2;\n    return { ...state,\n      replys: replys.result.replys\n    };\n  },\n  [LIST_REPLYS_FAILURE]: (state, _ref3) => {\n    let {\n      payload: error\n    } = _ref3;\n    return { ...state,\n      error\n    };\n  }\n}, initialState);\nexport default replys;","map":{"version":3,"names":["createAction","handleActions","createRequestSaga","createRequestActionTypes","postsAPI","takeLatest","LIST_REPLYS","LIST_REPLYS_SUCCESS","LIST_REPLYS_FAILURE","listReplys","user_name","page","listReplysSaga","replysSaga","initialState","replys","error","state","payload","result"],"sources":["D:/GitHub/Capstone/eco-project/frontend/src/modules/replys.js"],"sourcesContent":["import { createAction, handleActions } from \"redux-actions\";\r\nimport createRequestSaga, {\r\n  createRequestActionTypes,\r\n} from \"../lib/createRequestSaga\";\r\nimport * as postsAPI from '../lib/api/post';\r\nimport { takeLatest } from 'redux-saga/effects';\r\n\r\nconst [\r\n  LIST_REPLYS,\r\n  LIST_REPLYS_SUCCESS,\r\n  LIST_REPLYS_FAILURE,\r\n] = createRequestActionTypes('replys/LIST_POSTS');\r\n\r\nexport const listReplys = createAction(\r\n    LIST_REPLYS,\r\n  ({ user_name, page }) => ({  user_name, page }),\r\n);\r\n\r\nconst listReplysSaga = createRequestSaga(LIST_REPLYS, postsAPI.listReplys);\r\nexport function* replysSaga() {\r\n  yield takeLatest(LIST_REPLYS, listReplysSaga);\r\n}\r\n\r\nconst initialState = {\r\n  replys: null,\r\n  error: null,\r\n};\r\n\r\nconst replys = handleActions(\r\n  {\r\n    [LIST_REPLYS_SUCCESS]: (state, { payload: replys }) => ({\r\n      ...state,\r\n      replys: replys.result.replys,\r\n    }),\r\n    [LIST_REPLYS_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      error,\r\n    }),\r\n  },\r\n  initialState,\r\n);\r\n\r\nexport default replys;"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,aAAvB,QAA4C,eAA5C;AACA,OAAOC,iBAAP,IACEC,wBADF,QAEO,0BAFP;AAGA,OAAO,KAAKC,QAAZ,MAA0B,iBAA1B;AACA,SAASC,UAAT,QAA2B,oBAA3B;AAEA,MAAM,CACJC,WADI,EAEJC,mBAFI,EAGJC,mBAHI,IAIFL,wBAAwB,CAAC,mBAAD,CAJ5B;AAMA,OAAO,MAAMM,UAAU,GAAGT,YAAY,CAClCM,WADkC,EAEpC;EAAA,IAAC;IAAEI,SAAF;IAAaC;EAAb,CAAD;EAAA,OAA0B;IAAGD,SAAH;IAAcC;EAAd,CAA1B;AAAA,CAFoC,CAA/B;AAKP,MAAMC,cAAc,GAAGV,iBAAiB,CAACI,WAAD,EAAcF,QAAQ,CAACK,UAAvB,CAAxC;AACA,OAAO,UAAUI,UAAV,GAAuB;EAC5B,MAAMR,UAAU,CAACC,WAAD,EAAcM,cAAd,CAAhB;AACD;AAED,MAAME,YAAY,GAAG;EACnBC,MAAM,EAAE,IADW;EAEnBC,KAAK,EAAE;AAFY,CAArB;AAKA,MAAMD,MAAM,GAAGd,aAAa,CAC1B;EACE,CAACM,mBAAD,GAAuB,CAACU,KAAD;IAAA,IAAQ;MAAEC,OAAO,EAAEH;IAAX,CAAR;IAAA,OAAiC,EACtD,GAAGE,KADmD;MAEtDF,MAAM,EAAEA,MAAM,CAACI,MAAP,CAAcJ;IAFgC,CAAjC;EAAA,CADzB;EAKE,CAACP,mBAAD,GAAuB,CAACS,KAAD;IAAA,IAAQ;MAAEC,OAAO,EAAEF;IAAX,CAAR;IAAA,OAAgC,EACrD,GAAGC,KADkD;MAErDD;IAFqD,CAAhC;EAAA;AALzB,CAD0B,EAW1BF,YAX0B,CAA5B;AAcA,eAAeC,MAAf"},"metadata":{},"sourceType":"module"}