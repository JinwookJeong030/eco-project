{"ast":null,"code":"import { call, put } from 'redux-saga/effects';\nimport { startLoading, finishLoading } from '../modules/loading';\nexport const createRequestActionTypes = type => {\n  const SUCCESS = `${type}_SUCCESS`;\n  const FAILURE = `${type}_FAILURE`;\n  return [type, SUCCESS, FAILURE];\n};\nexport default function createRequestSaga(type, request) {\n  const SUCCESS = `${type}_SUCCESS`;\n  const FAILURE = `${type}_FAILURE`;\n  return function* (action) {\n    yield put(startLoading(type));\n    let message;\n\n    try {\n      const response = yield call(request, action.payload);\n      message = response.data.message;\n      yield put({\n        type: SUCCESS,\n        payload: response.data\n      });\n    } catch (e) {\n      yield put({\n        type: FAILURE,\n        payload: {\n          e,\n          message: message\n        },\n        error: true\n      });\n    }\n\n    yield put(finishLoading(type));\n  };\n}","map":{"version":3,"names":["call","put","startLoading","finishLoading","createRequestActionTypes","type","SUCCESS","FAILURE","createRequestSaga","request","action","message","response","payload","data","e","error"],"sources":["D:/GitHub/Capstone/eco-project/frontend/src/lib/createRequestSaga.js"],"sourcesContent":["import { call, put } from 'redux-saga/effects';\r\nimport { startLoading, finishLoading } from '../modules/loading';\r\nexport const createRequestActionTypes = (type) => {\r\n  const SUCCESS = `${type}_SUCCESS`;\r\n  const FAILURE = `${type}_FAILURE`;\r\n  return [type, SUCCESS, FAILURE];\r\n};\r\n\r\nexport default function createRequestSaga(type, request) {\r\n  const SUCCESS = `${type}_SUCCESS`;\r\n  const FAILURE = `${type}_FAILURE`;\r\n\r\n  return function* (action) {\r\n    yield put(startLoading(type));\r\n    let message;\r\n    try {\r\n      const response = yield call(request, action.payload);\r\n      message = response.data.message;\r\n      yield put({\r\n        type: SUCCESS,\r\n        payload: response.data,\r\n      });\r\n    } catch (e) {\r\n      yield put({\r\n        type: FAILURE,\r\n        payload: { e, message: message },\r\n        error: true,\r\n      });\r\n    }\r\n    yield put(finishLoading(type));\r\n  };\r\n}\r\n"],"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,QAA0B,oBAA1B;AACA,SAASC,YAAT,EAAuBC,aAAvB,QAA4C,oBAA5C;AACA,OAAO,MAAMC,wBAAwB,GAAIC,IAAD,IAAU;EAChD,MAAMC,OAAO,GAAI,GAAED,IAAK,UAAxB;EACA,MAAME,OAAO,GAAI,GAAEF,IAAK,UAAxB;EACA,OAAO,CAACA,IAAD,EAAOC,OAAP,EAAgBC,OAAhB,CAAP;AACD,CAJM;AAMP,eAAe,SAASC,iBAAT,CAA2BH,IAA3B,EAAiCI,OAAjC,EAA0C;EACvD,MAAMH,OAAO,GAAI,GAAED,IAAK,UAAxB;EACA,MAAME,OAAO,GAAI,GAAEF,IAAK,UAAxB;EAEA,OAAO,WAAWK,MAAX,EAAmB;IACxB,MAAMT,GAAG,CAACC,YAAY,CAACG,IAAD,CAAb,CAAT;IACA,IAAIM,OAAJ;;IACA,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMZ,IAAI,CAACS,OAAD,EAAUC,MAAM,CAACG,OAAjB,CAA3B;MACAF,OAAO,GAAGC,QAAQ,CAACE,IAAT,CAAcH,OAAxB;MACA,MAAMV,GAAG,CAAC;QACRI,IAAI,EAAEC,OADE;QAERO,OAAO,EAAED,QAAQ,CAACE;MAFV,CAAD,CAAT;IAID,CAPD,CAOE,OAAOC,CAAP,EAAU;MACV,MAAMd,GAAG,CAAC;QACRI,IAAI,EAAEE,OADE;QAERM,OAAO,EAAE;UAAEE,CAAF;UAAKJ,OAAO,EAAEA;QAAd,CAFD;QAGRK,KAAK,EAAE;MAHC,CAAD,CAAT;IAKD;;IACD,MAAMf,GAAG,CAACE,aAAa,CAACE,IAAD,CAAd,CAAT;EACD,CAlBD;AAmBD"},"metadata":{},"sourceType":"module"}