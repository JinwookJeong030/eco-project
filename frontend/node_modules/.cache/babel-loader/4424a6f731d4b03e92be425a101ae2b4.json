{"ast":null,"code":"var _jsxFileName = \"D:\\\\GitHub\\\\Capstone\\\\eco-project\\\\frontend\\\\src\\\\containers\\\\auth\\\\RegisterFrom.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { changeField, initializeForm, register } from '../../modules/auth';\nimport AuthForm from '../../components/auth/AuthForm';\nimport { check } from '../../modules/user';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst RegisterForm = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const {\n    form,\n    auth,\n    authError,\n    user\n  } = useSelector(_ref => {\n    let {\n      auth,\n      user\n    } = _ref;\n    return {\n      form: auth.register,\n      auth: auth.auth,\n      authError: auth.authError,\n      user: user.user\n    };\n  });\n  useEffect(() => {\n    dispatch(initializeForm('register'));\n  }, [dispatch]);\n  const [error, setError] = useState(null);\n\n  const onChange = e => {\n    const {\n      value,\n      name\n    } = e.target;\n    dispatch(changeField({\n      form: 'register',\n      key: name,\n      value\n    }));\n  };\n\n  const onSubmit = e => {\n    e.preventDefault();\n    const {\n      user_email,\n      user_password,\n      passwordConfirm,\n      user_name\n    } = form; //빈칸이 존재하는 경우\n\n    if ([user_email, user_password, passwordConfirm].includes('')) {\n      setError('빈 칸을 모두 입력해주세요.');\n      return;\n    }\n\n    const emailRegex = /^[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*.[a-zA-Z]{2,3}$/i;\n\n    if (!emailRegex.test(user_email)) {\n      setError('이메일 형식이 옳지 않습니다.');\n      dispatch(changeField({\n        form: 'register',\n        key: 'user_email',\n        value: ''\n      }));\n      return;\n    } //비밀번호가 일치하지 않는 경우\n\n\n    if (user_password !== passwordConfirm) {\n      setError('비밀번호가 일치하지 않습니다.');\n      dispatch(changeField({\n        form: 'register',\n        key: 'user_password',\n        value: ''\n      }));\n      dispatch(changeField({\n        form: 'register',\n        key: 'passwordConfirm',\n        value: ''\n      }));\n      return;\n    }\n\n    const pwRegex = /^.*(?=^.{8,15}$)(?=.*\\d)(?=.*[a-zA-Z])(?=.*[!@#$%^&+=]).*$/;\n\n    if (!(pwRegex.test(user_password) || pwRegex.test(passwordConfirm))) {\n      setError('비밀번호는 숫자, 문자, 특수문자를 포함한 8~15자이어야 합니다.');\n      dispatch(changeField({\n        form: 'register',\n        key: 'user_password',\n        value: ''\n      }));\n      dispatch(changeField({\n        form: 'register',\n        key: 'passwordConfirm',\n        value: ''\n      }));\n      return;\n    }\n\n    dispatch(register({\n      user_email,\n      user_password,\n      user_name\n    }));\n  }; //회원가입 실패 처리 DB\n\n\n  useEffect(() => {\n    if (Object.keys(authError).length.includes('response')) {\n      if (authError.response.status === 500) {\n        setError('알수없는 오류');\n        return;\n      }\n\n      if (authError.response.status === 429) {\n        setError('이미 존재하는 계정입니다.');\n        return;\n      }\n\n      if (authError.response.status === 439) {\n        setError('이미 존재하는 닉네임입니다.');\n        return;\n      }\n\n      console.log('회원가입 실패');\n      console.log(authError);\n      return;\n    }\n\n    if (auth) {\n      console.log('회원가입 성공');\n      console.log(auth);\n      alert('회원가입 성공! 로그인 페이지로 이동합니다');\n      dispatch(initializeForm('auth'));\n      navigate('/login');\n      return;\n    }\n  }, [auth, authError, dispatch]);\n  return /*#__PURE__*/_jsxDEV(AuthForm, {\n    type: \"register\",\n    form: form,\n    onChange: onChange,\n    onSubmit: onSubmit,\n    error: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n};\n\n_s(RegisterForm, \"vhAc1vsoBGm/8wd5vVkezDsrf3w=\", false, function () {\n  return [useDispatch, useNavigate, useSelector];\n});\n\n_c = RegisterForm;\nexport default RegisterForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"RegisterForm\");","map":{"version":3,"names":["useEffect","useState","useDispatch","useSelector","changeField","initializeForm","register","AuthForm","check","useNavigate","RegisterForm","dispatch","navigate","form","auth","authError","user","error","setError","onChange","e","value","name","target","key","onSubmit","preventDefault","user_email","user_password","passwordConfirm","user_name","includes","emailRegex","test","pwRegex","Object","keys","length","response","status","console","log","alert"],"sources":["D:/GitHub/Capstone/eco-project/frontend/src/containers/auth/RegisterFrom.js"],"sourcesContent":["import { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { changeField, initializeForm, register } from '../../modules/auth';\r\nimport AuthForm from '../../components/auth/AuthForm';\r\nimport { check } from '../../modules/user';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst RegisterForm = () => {\r\n  const dispatch = useDispatch();\r\n  const navigate = useNavigate();\r\n  const { form, auth, authError, user } = useSelector(({ auth, user }) => ({\r\n    form: auth.register,\r\n    auth: auth.auth,\r\n    authError: auth.authError,\r\n    user: user.user,\r\n  }));\r\n  useEffect(() => {\r\n    dispatch(initializeForm('register'));\r\n\r\n  }, [dispatch]);\r\n  const [error, setError] = useState(null);\r\n\r\n  const onChange = (e) => {\r\n    const { value, name } = e.target;\r\n    dispatch(changeField({ form: 'register', key: name, value }));\r\n  };\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n    const { user_email, user_password, passwordConfirm, user_name } = form;\r\n\r\n    //빈칸이 존재하는 경우\r\n    if ([user_email, user_password, passwordConfirm].includes('')) {\r\n      setError('빈 칸을 모두 입력해주세요.');\r\n      return;\r\n    }\r\n    const emailRegex =\r\n      /^[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*.[a-zA-Z]{2,3}$/i;\r\n    if (!emailRegex.test(user_email)) {\r\n      setError('이메일 형식이 옳지 않습니다.');\r\n      dispatch(changeField({ form: 'register', key: 'user_email', value: '' }));\r\n\r\n      return;\r\n    }\r\n\r\n    //비밀번호가 일치하지 않는 경우\r\n    if (user_password !== passwordConfirm) {\r\n      setError('비밀번호가 일치하지 않습니다.');\r\n      dispatch(changeField({ form: 'register', key: 'user_password', value: '' }));\r\n      dispatch(\r\n        changeField({ form: 'register', key: 'passwordConfirm', value: '' }),\r\n      );\r\n      return;\r\n    }\r\n    const pwRegex =\r\n      /^.*(?=^.{8,15}$)(?=.*\\d)(?=.*[a-zA-Z])(?=.*[!@#$%^&+=]).*$/;\r\n\r\n    if (!(pwRegex.test(user_password) || pwRegex.test(passwordConfirm))) {\r\n      setError('비밀번호는 숫자, 문자, 특수문자를 포함한 8~15자이어야 합니다.');\r\n      dispatch(changeField({ form: 'register', key: 'user_password', value: '' }));\r\n      dispatch(\r\n        changeField({ form: 'register', key: 'passwordConfirm', value: '' }),\r\n      );\r\n      return;\r\n    }\r\n    dispatch(register({ user_email, user_password, user_name }));\r\n  };\r\n\r\n  //회원가입 실패 처리 DB\r\n  useEffect(() => {\r\n    if (Object.keys(authError).length.includes('response')) {\r\n      if (authError.response.status === 500) {\r\n        setError('알수없는 오류');\r\n        return;\r\n      }\r\n      if (authError.response.status === 429) {\r\n        setError('이미 존재하는 계정입니다.');\r\n        return;\r\n      }\r\n      if (authError.response.status === 439) {\r\n        setError('이미 존재하는 닉네임입니다.');\r\n        return;\r\n      }\r\n      console.log('회원가입 실패');\r\n      console.log(authError);\r\n      return;\r\n    }\r\n    if (auth) {\r\n      console.log('회원가입 성공');\r\n      console.log(auth);\r\n      alert('회원가입 성공! 로그인 페이지로 이동합니다');\r\n      dispatch(initializeForm('auth'));\r\n      navigate('/login');\r\n\r\n      return;\r\n    }\r\n  }, [auth, authError, dispatch]);\r\n\r\n  return (\r\n    <AuthForm\r\n      type=\"register\"\r\n      form={form}\r\n      onChange={onChange}\r\n      onSubmit={onSubmit}\r\n      error={error}\r\n    />\r\n  );\r\n};\r\n\r\nexport default RegisterForm;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}