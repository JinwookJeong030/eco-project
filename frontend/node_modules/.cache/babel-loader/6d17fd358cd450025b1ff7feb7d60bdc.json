{"ast":null,"code":"import { createAction, handleActions } from 'redux-actions';\nimport produce from 'immer';\nimport createRequestSaga, { createRequestActionTypes } from '../lib/createRequestSaga';\nimport { takeLatest } from 'redux-saga/effects';\nimport * as authAPI from '../lib/api/auth';\nconst CHANGE_FIELD = 'auth/CHANGE_FIELD';\nconst INITIALIZE_FORM = 'auth/INITIALIZE_FORM';\nconst [REGISTER, REGISTER_SUCCESS, REGISTER_FAILURE] = createRequestActionTypes('auth/REGISTER');\nconst [LOGIN, LOGIN_SUCCESS, LOGIN_FAILURE] = createRequestActionTypes('auth/LOGIN');\nexport const changeField = createAction(CHANGE_FIELD, _ref => {\n  let {\n    form,\n    key,\n    value\n  } = _ref;\n  return {\n    form,\n    key,\n    value\n  };\n});\nexport const initializeForm = createAction(INITIALIZE_FORM, form => form);\nexport const register = createAction(REGISTER, _ref2 => {\n  let {\n    email,\n    password,\n    name\n  } = _ref2;\n  return {\n    email,\n    password,\n    name\n  };\n});\nexport const login = createAction(LOGIN, _ref3 => {\n  let {\n    email,\n    password\n  } = _ref3;\n  return {\n    email,\n    password\n  };\n});\nconst registerSaga = createRequestSaga(REGISTER, authAPI.register);\nconst loginSaga = createRequestSaga(LOGIN, authAPI.login);\nexport function* authSaga() {\n  yield takeLatest(REGISTER, registerSaga);\n  yield takeLatest(LOGIN, loginSaga);\n}\nconst initialState = {\n  register: {\n    email: '',\n    password: '',\n    passwordConfirm: '',\n    name: ''\n  },\n  login: {\n    email: '',\n    password: ''\n  },\n  auth: null,\n  authError: null\n};\nconst auth = handleActions({\n  [CHANGE_FIELD]: (state, _ref4) => {\n    let {\n      payload: {\n        form,\n        key,\n        value\n      }\n    } = _ref4;\n    return produce(state, draft => {\n      draft[form][key] = value;\n    });\n  },\n  [INITIALIZE_FORM]: (state, _ref5) => {\n    let {\n      payload: form\n    } = _ref5;\n    return { ...state,\n      [form]: initialState[form],\n      authError: null\n    };\n  },\n  [REGISTER_SUCCESS]: (state, _ref6) => {\n    let {\n      payload: auth\n    } = _ref6;\n    return { ...state,\n      authError: null,\n      auth\n    };\n  },\n  [REGISTER_FAILURE]: (state, _ref7) => {\n    let {\n      payload: error\n    } = _ref7;\n    return { ...state,\n      auth,\n      authError: error\n    };\n  },\n  [LOGIN_SUCCESS]: (state, _ref8) => {\n    let {\n      payload: auth\n    } = _ref8;\n    return { ...state,\n      authError: null,\n      auth\n    };\n  },\n  [LOGIN_FAILURE]: (state, _ref9) => {\n    let {\n      payload: error\n    } = _ref9;\n    return { ...state,\n      authError: error\n    };\n  }\n}, initialState);\nexport default auth;","map":{"version":3,"names":["createAction","handleActions","produce","createRequestSaga","createRequestActionTypes","takeLatest","authAPI","CHANGE_FIELD","INITIALIZE_FORM","REGISTER","REGISTER_SUCCESS","REGISTER_FAILURE","LOGIN","LOGIN_SUCCESS","LOGIN_FAILURE","changeField","form","key","value","initializeForm","register","email","password","name","login","registerSaga","loginSaga","authSaga","initialState","passwordConfirm","auth","authError","state","payload","draft","error"],"sources":["D:/GitHub/Capstone/eco-project/frontend/src/modules/auth.js"],"sourcesContent":["import { createAction, handleActions } from 'redux-actions';\r\nimport produce from 'immer';\r\nimport createRequestSaga, {\r\n  createRequestActionTypes,\r\n} from '../lib/createRequestSaga';\r\nimport { takeLatest } from 'redux-saga/effects';\r\nimport * as authAPI from '../lib/api/auth';\r\n\r\nconst CHANGE_FIELD = 'auth/CHANGE_FIELD';\r\nconst INITIALIZE_FORM = 'auth/INITIALIZE_FORM';\r\n\r\nconst [REGISTER, REGISTER_SUCCESS, REGISTER_FAILURE] =\r\n  createRequestActionTypes('auth/REGISTER');\r\n\r\nconst [LOGIN, LOGIN_SUCCESS, LOGIN_FAILURE] =\r\n  createRequestActionTypes('auth/LOGIN');\r\n\r\nexport const changeField = createAction(\r\n  CHANGE_FIELD,\r\n  ({ form, key, value }) => ({\r\n    form,\r\n    key,\r\n    value,\r\n  }),\r\n);\r\nexport const initializeForm = createAction(INITIALIZE_FORM, (form) => form);\r\n\r\nexport const register = createAction(REGISTER, ({ email, password, name }) => ({\r\n  email,\r\n  password,\r\n  name,\r\n}));\r\nexport const login = createAction(LOGIN, ({ email, password }) => ({\r\n  email,\r\n  password,\r\n}));\r\n\r\nconst registerSaga = createRequestSaga(REGISTER, authAPI.register);\r\n\r\nconst loginSaga = createRequestSaga(LOGIN, authAPI.login);\r\n\r\nexport function* authSaga() {\r\n  yield takeLatest(REGISTER, registerSaga);\r\n  yield takeLatest(LOGIN, loginSaga);\r\n}\r\n\r\nconst initialState = {\r\n  register: {\r\n    email: '',\r\n    password: '',\r\n    passwordConfirm: '',\r\n    name: '',\r\n  },\r\n  login: {\r\n    email: '',\r\n    password: '',\r\n  },\r\n  auth: null,\r\n  authError: null,\r\n};\r\n\r\nconst auth = handleActions(\r\n  {\r\n    [CHANGE_FIELD]: (state, { payload: { form, key, value } }) =>\r\n      produce(state, (draft) => {\r\n        draft[form][key] = value;\r\n      }),\r\n    [INITIALIZE_FORM]: (state, { payload: form }) => ({\r\n      ...state,\r\n      [form]: initialState[form],\r\n      authError: null,\r\n    }),\r\n    [REGISTER_SUCCESS]: (state, { payload: auth }) => ({\r\n      ...state,\r\n      authError: null,\r\n      auth,\r\n    }),\r\n    [REGISTER_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      auth,\r\n      authError: error,\r\n    }),\r\n    [LOGIN_SUCCESS]: (state, { payload: auth }) => ({\r\n      ...state,\r\n      authError: null,\r\n      auth,\r\n    }),\r\n    [LOGIN_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      authError: error,\r\n    }),\r\n  },\r\n  initialState,\r\n);\r\nexport default auth;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}