{"ast":null,"code":"import { createAction, handleActions } from \"redux-actions\";\nimport createRequestSaga, { createRequestActionTypes } from \"../lib/createRequestSaga\";\nimport * as postsAPI from '../lib/api/post';\nimport { takeLatest } from 'redux-saga/effects';\nconst INITIALIZE = 'replys/INITIALIZE';\nconst CHANGE_FIELD = 'replys/CHANGE_FIELD';\nconst [LIST_REPLYS, LIST_REPLYS_SUCCESS, LIST_REPLYS_FAILURE] = createRequestActionTypes('replys/LIST_POSTS');\nconst [WRITE_REPLYS, WRITE_REPLYS_SUCCESS, WRITE_REPLYS_FAILURE] = createRequestActionTypes('replys/WRITE_REPLYS');\nconst UNLOAD_REPLYS = 'replys/UNLOAD_REPLYS'; // 포스트 페이지에서 벗어날 때 데이터 비우기\n\nexport const initialize = createAction(INITIALIZE);\nexport const listReplys = createAction(LIST_REPLYS, id => id);\nexport const changeField = createAction(CHANGE_FIELD, _ref => {\n  let {\n    key,\n    value\n  } = _ref;\n  return {\n    key,\n    value\n  };\n});\nexport const unloadReplys = createAction(UNLOAD_REPLYS);\nconst writeReplySaga = createRequestSaga(WRITE_REPLYS, postsAPI.writeReply);\nconst listReplysSaga = createRequestSaga(LIST_REPLYS, postsAPI.listReplys);\nexport function* replysSaga() {\n  yield takeLatest(LIST_REPLYS, listReplysSaga);\n}\nconst initialState = {\n  reply_contents: null,\n  reply_type: 0,\n  reply_order: 0,\n  reply_group_id: 0,\n  reply: null,\n  replyError: null,\n  replys: null,\n  replysError: null\n};\nconst replys = handleActions({\n  [CHANGE_FIELD]: (state, _ref2) => {\n    let {\n      payload: {\n        key,\n        value\n      }\n    } = _ref2;\n    return { ...state,\n      [key]: value // 특정 key 값을 업데이트\n\n    };\n  },\n  [LIST_REPLYS_SUCCESS]: (state, _ref3) => {\n    let {\n      payload: replys\n    } = _ref3;\n    return { ...state,\n      replys: replys.result.replys\n    };\n  },\n  [LIST_REPLYS_FAILURE]: (state, _ref4) => {\n    let {\n      payload: error\n    } = _ref4;\n    return { ...state,\n      error\n    };\n  },\n  [WRITE_REPLYS]: state => ({ ...state,\n    reply: null,\n    replyError: null\n  }),\n  // 포스트 작성 성공\n  [WRITE_REPLYS_SUCCESS]: (state, _ref5) => {\n    let {\n      payload: reply\n    } = _ref5;\n    return { ...state,\n      reply\n    };\n  },\n  // 포스트 작성 실패\n  [WRITE_REPLYS_FAILURE]: (state, _ref6) => {\n    let {\n      payload: replysError\n    } = _ref6;\n    return { ...state,\n      replysError\n    };\n  },\n  [UNLOAD_REPLYS]: () => initialState\n}, initialState);\nexport default replys;","map":{"version":3,"names":["createAction","handleActions","createRequestSaga","createRequestActionTypes","postsAPI","takeLatest","INITIALIZE","CHANGE_FIELD","LIST_REPLYS","LIST_REPLYS_SUCCESS","LIST_REPLYS_FAILURE","WRITE_REPLYS","WRITE_REPLYS_SUCCESS","WRITE_REPLYS_FAILURE","UNLOAD_REPLYS","initialize","listReplys","id","changeField","key","value","unloadReplys","writeReplySaga","writeReply","listReplysSaga","replysSaga","initialState","reply_contents","reply_type","reply_order","reply_group_id","reply","replyError","replys","replysError","state","payload","result","error"],"sources":["D:/GitHub/Capstone/eco-project/frontend/src/modules/replys.js"],"sourcesContent":["import { createAction, handleActions } from \"redux-actions\";\r\nimport createRequestSaga, {\r\n  createRequestActionTypes,\r\n} from \"../lib/createRequestSaga\";\r\nimport * as postsAPI from '../lib/api/post';\r\nimport { takeLatest } from 'redux-saga/effects';\r\n\r\nconst INITIALIZE = 'replys/INITIALIZE'; \r\nconst CHANGE_FIELD = 'replys/CHANGE_FIELD';\r\nconst [\r\n  LIST_REPLYS,\r\n  LIST_REPLYS_SUCCESS,\r\n  LIST_REPLYS_FAILURE,\r\n] = createRequestActionTypes('replys/LIST_POSTS');\r\n\r\n\r\nconst [\r\n  WRITE_REPLYS,\r\n  WRITE_REPLYS_SUCCESS,\r\n  WRITE_REPLYS_FAILURE,\r\n] = createRequestActionTypes('replys/WRITE_REPLYS');\r\n\r\n\r\nconst UNLOAD_REPLYS = 'replys/UNLOAD_REPLYS'; // 포스트 페이지에서 벗어날 때 데이터 비우기\r\n\r\nexport const initialize = createAction(INITIALIZE);\r\nexport const listReplys = createAction(\r\n    LIST_REPLYS, id=>id\r\n);\r\n\r\nexport const changeField = createAction(CHANGE_FIELD, ({ key, value }) => ({\r\n  key,\r\n  value,\r\n}));\r\n\r\nexport const unloadReplys = createAction(UNLOAD_REPLYS);\r\n\r\n\r\nconst writeReplySaga = createRequestSaga(WRITE_REPLYS, postsAPI.writeReply);\r\nconst listReplysSaga = createRequestSaga(LIST_REPLYS, postsAPI.listReplys);\r\nexport function* replysSaga() {\r\n  yield takeLatest(LIST_REPLYS, listReplysSaga);\r\n}\r\n\r\nconst initialState = {\r\n  reply_contents: null,\r\n  reply_type: 0,\r\n  reply_order: 0,\r\n  reply_group_id: 0,\r\n  reply:null,\r\n  replyError:null,\r\n  replys: null,\r\n  replysError: null,\r\n};\r\n\r\nconst replys = handleActions(\r\n  {\r\n\r\n    [CHANGE_FIELD]:(state, { payload: { key, value } }) => ({\r\n      ...state,\r\n      [key]: value, // 특정 key 값을 업데이트\r\n    }),\r\n    [LIST_REPLYS_SUCCESS]: (state, { payload: replys }) => ({\r\n      ...state,\r\n      replys: replys.result.replys,\r\n    }),\r\n    [LIST_REPLYS_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      error,\r\n    }),\r\n    [WRITE_REPLYS]: state => ({\r\n      ...state,\r\n      reply: null,\r\n      replyError: null,\r\n    }),\r\n    // 포스트 작성 성공\r\n    [WRITE_REPLYS_SUCCESS]: (state, { payload: reply }) => ({\r\n      ...state,\r\n      reply,\r\n    }),\r\n    // 포스트 작성 실패\r\n    [WRITE_REPLYS_FAILURE]: (state, { payload: replysError }) => ({\r\n      ...state,\r\n      replysError,\r\n    }),\r\n\r\n\r\n    [UNLOAD_REPLYS]: () => initialState,\r\n    \r\n  },\r\n  initialState,\r\n);\r\n\r\nexport default replys;"],"mappings":"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"},"metadata":{},"sourceType":"module"}