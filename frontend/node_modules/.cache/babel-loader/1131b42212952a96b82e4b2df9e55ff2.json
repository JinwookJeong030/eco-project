{"ast":null,"code":"var _jsxFileName = \"D:\\\\GitHub\\\\Capstone\\\\eco-project\\\\frontend\\\\src\\\\components\\\\post\\\\Editor.js\",\n    _s = $RefreshSig$();\n\nimport * as React from 'react';\nimport styled from 'styled-components';\nimport axios from 'axios';\nimport ReactQuill from 'react-quill';\nimport 'react-quill/dist/quill.snow.css';\nimport { RangeStatic } from 'quill';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Editor = _ref => {\n  _s();\n\n  let {\n    htmlStr,\n    setHtmlStr\n  } = _ref;\n  const quillRef = React.useRef < ReactQuill > null; // 이미지 업로드 핸들러, modules 설정보다 위에 있어야 정상 적용\n\n  const imageHandler = () => {\n    // file input 임의 생성\n    const input = document.createElement('input');\n    input.setAttribute('type', 'file');\n    input.click();\n\n    input.onchange = async () => {\n      const file = input.files;\n      const formData = new FormData();\n\n      if (file) {\n        formData.append(\"multipartFiles\", file[0]);\n      } // file 데이터 담아서 서버에 전달하여 이미지 업로드\n\n\n      const res = await axios.post('http://localhost:8080/uploadImage', formData);\n\n      if (quillRef.current) {\n        // 현재 Editor 커서 위치에 서버로부터 전달받은 이미지 불러오는 url을 이용하여 이미지 태그 추가\n        const index = quillRef.current.getEditor().getSelection().index;\n        const quillEditor = quillRef.current.getEditor();\n        quillEditor.setSelection(index, 1);\n        quillEditor.clipboard.dangerouslyPasteHTML(index, `<img src=${res.data} alt=${'alt text'} />`);\n      }\n    };\n  }; // useMemo를 사용하지 않고 handler를 등록할 경우 타이핑 할때마다 focus가 벗어남\n\n\n  const modules = React.useMemo(() => ({\n    toolbar: {\n      // container에 등록되는 순서대로 tool 배치\n      container: [[{\n        'font': []\n      }], // font 설정\n      [{\n        'header': [1, 2, 3, 4, 5, 6, false]\n      }], // header 설정\n      ['bold', 'italic', 'underline', 'strike', 'blockquote', 'code-block', 'formula'], // 굵기, 기울기, 밑줄 등 부가 tool 설정\n      [{\n        'list': 'ordered'\n      }, {\n        'list': 'bullet'\n      }, {\n        'indent': '-1'\n      }, {\n        'indent': '+1'\n      }], // 리스트, 인덴트 설정\n      ['link', 'image', 'video'], // 링크, 이미지, 비디오 업로드 설정\n      [{\n        'align': []\n      }, {\n        'color': []\n      }, {\n        'background': []\n      }], // 정렬, 글씨 색깔, 글씨 배경색 설정\n      ['clean'] // toolbar 설정 초기화 설정\n      ],\n      // custom 핸들러 설정\n      handlers: {\n        image: imageHandler // 이미지 tool 사용에 대한 핸들러 설정\n\n      }\n    }\n  }), []); // toolbar에 사용되는 tool format\n\n  const formats = ['font', 'header', 'bold', 'italic', 'underline', 'strike', 'blockquote', 'code-block', 'formula', 'list', 'bullet', 'indent', 'link', 'image', 'video', 'align', 'color', 'background'];\n  return /*#__PURE__*/_jsxDEV(CustomReactQuill, {\n    ref: quillRef,\n    theme: \"snow\",\n    modules: modules,\n    formats: formats,\n    value: htmlStr,\n    placeholder: \"\\uB0B4\\uC6A9\\uC744 \\uC785\\uB825\\uD558\\uC138\\uC694.\",\n    onChange: (content, delta, source, editor) => setHtmlStr(editor.getHTML())\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Editor, \"LwcoRcgB/Wj17Lodge/OkWgwi4E=\");\n\n_c = Editor;\nexport default Editor; // style\n\nconst CustomReactQuill = styled(ReactQuill)`\n    height: 300px;\n`;\n_c2 = CustomReactQuill;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Editor\");\n$RefreshReg$(_c2, \"CustomReactQuill\");","map":{"version":3,"names":["React","styled","axios","ReactQuill","RangeStatic","Editor","htmlStr","setHtmlStr","quillRef","useRef","imageHandler","input","document","createElement","setAttribute","click","onchange","file","files","formData","FormData","append","res","post","current","index","getEditor","getSelection","quillEditor","setSelection","clipboard","dangerouslyPasteHTML","data","modules","useMemo","toolbar","container","handlers","image","formats","content","delta","source","editor","getHTML","CustomReactQuill"],"sources":["D:/GitHub/Capstone/eco-project/frontend/src/components/post/Editor.js"],"sourcesContent":["import * as React from 'react';\r\nimport styled from 'styled-components';\r\nimport axios from 'axios';\r\n\r\n\r\nimport ReactQuill from 'react-quill';\r\nimport 'react-quill/dist/quill.snow.css';\r\nimport { RangeStatic } from 'quill';\r\n\r\n\r\nconst Editor= ({ htmlStr, setHtmlStr}) => {\r\n\r\n    const quillRef = React.useRef<ReactQuill>(null);\r\n\r\n    // 이미지 업로드 핸들러, modules 설정보다 위에 있어야 정상 적용\r\n    const imageHandler = () => {\r\n        // file input 임의 생성\r\n        const input = document.createElement('input');\r\n        input.setAttribute('type', 'file');\r\n        input.click();\r\n\r\n        input.onchange = async() => {\r\n            const file = input.files;\r\n            const formData = new FormData();\r\n\r\n            if(file) {\r\n                formData.append(\"multipartFiles\", file[0]);\r\n            }\r\n\r\n            // file 데이터 담아서 서버에 전달하여 이미지 업로드\r\n            const res = await axios.post('http://localhost:8080/uploadImage', formData);\r\n\r\n            if(quillRef.current) {\r\n                // 현재 Editor 커서 위치에 서버로부터 전달받은 이미지 불러오는 url을 이용하여 이미지 태그 추가\r\n                const index = (quillRef.current.getEditor().getSelection()).index;\r\n\r\n                const quillEditor = quillRef.current.getEditor();\r\n                quillEditor.setSelection(index, 1);\r\n\r\n                quillEditor.clipboard.dangerouslyPasteHTML(\r\n                    index,\r\n                    `<img src=${res.data} alt=${'alt text'} />`\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    // useMemo를 사용하지 않고 handler를 등록할 경우 타이핑 할때마다 focus가 벗어남\r\n    const modules = React.useMemo(() => ({\r\n            toolbar: {\r\n                // container에 등록되는 순서대로 tool 배치\r\n                container: [\r\n                    [{ 'font': [] }], // font 설정\r\n                    [{ 'header': [1, 2, 3, 4, 5, 6, false] }], // header 설정\r\n                    ['bold', 'italic', 'underline','strike', 'blockquote', 'code-block', 'formula'], // 굵기, 기울기, 밑줄 등 부가 tool 설정\r\n                    [{'list': 'ordered'}, {'list': 'bullet'}, {'indent': '-1'}, {'indent': '+1'}], // 리스트, 인덴트 설정\r\n                    ['link', 'image', 'video'], // 링크, 이미지, 비디오 업로드 설정\r\n                    [{ 'align': [] }, { 'color': [] }, { 'background': [] }], // 정렬, 글씨 색깔, 글씨 배경색 설정\r\n                    ['clean'], // toolbar 설정 초기화 설정\r\n                ],\r\n\r\n                // custom 핸들러 설정\r\n                handlers: {\r\n                    image: imageHandler, // 이미지 tool 사용에 대한 핸들러 설정\r\n                }\r\n            },  \r\n        }\r\n    ), [])\r\n\r\n    // toolbar에 사용되는 tool format\r\n    const formats = [\r\n        'font',\r\n        'header',\r\n        'bold', 'italic', 'underline', 'strike', 'blockquote', 'code-block', 'formula',\r\n        'list', 'bullet', 'indent',\r\n        'link', 'image', 'video',\r\n        'align', 'color', 'background',        \r\n    ]\r\n\r\n    return (\r\n        <CustomReactQuill\r\n            ref={quillRef}\r\n            theme=\"snow\" \r\n            modules={modules} \r\n            formats={formats} \r\n            value={htmlStr} \r\n            placeholder='내용을 입력하세요.'\r\n            onChange={(content, delta, source, editor) => setHtmlStr(editor.getHTML())} />\r\n    )\r\n}\r\n\r\nexport default Editor;\r\n\r\n// style\r\nconst CustomReactQuill = styled(ReactQuill)`\r\n    height: 300px;\r\n`"],"mappings":"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"},"metadata":{},"sourceType":"module"}