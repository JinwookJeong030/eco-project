{"ast":null,"code":"import { createAction, handleActions } from \"redux-actions\";\nimport createRequestSaga, { createRequestActionTypes } from \"../lib/createRequestSaga\";\nimport * as postsAPI from '../lib/api/post';\nimport { takeLatest } from 'redux-saga/effects';\nconst INITIALIZE = 'write/INITIALIZE'; // 모든 내용 초기화\n\nconst CHANGE_FIELD = 'write/CHANGE_FIELD'; // 특정 key 값 바꾸기\n\nconst [WRITE_POST, WRITE_POST_SUCCESS, WRITE_POST_FAILURE] = createRequestActionTypes('write/WRITE_POST'); // 포스트 작성\n\nconst [CATEGORY, CATEGORY_SUCCESS, CATEGORY_FAILURE] = createRequestActionTypes('write/CATEGORY'); //카테고리 조회\n\nexport const initialize = createAction(INITIALIZE);\nexport const changeField = createAction(CHANGE_FIELD, _ref => {\n  let {\n    key,\n    value\n  } = _ref;\n  return {\n    key,\n    value\n  };\n});\nexport const writePost = createAction(WRITE_POST, _ref2 => {\n  let {\n    post_title,\n    post_contents,\n    post_category,\n    post_mission\n  } = _ref2;\n  return {\n    post_title,\n    post_contents,\n    post_category,\n    post_mission\n  };\n});\nexport const category = createAction(CATEGORY, _ref3 => {\n  let {} = _ref3;\n  return {};\n}); // 사가 생성\n\nconst writePostSaga = createRequestSaga(WRITE_POST, postsAPI.writePost);\nconst categorySaga = createRequestSaga(CATEGORY, postsAPI.categoryPost);\nexport function* writeSaga() {\n  yield takeLatest(CATEGORY, categorySaga);\n  yield takeLatest(WRITE_POST, writePostSaga);\n}\nconst initialState = {\n  post_title: '',\n  post_contents: '',\n  post_category: '',\n  post_mission: '',\n  post: null,\n  postError: null\n};\nconst write = handleActions({\n  [INITIALIZE]: state => initialState,\n  // initialState를 넣으면 초기 상태로 바뀜\n  [CHANGE_FIELD]: (state, _ref4) => {\n    let {\n      payload: {\n        key,\n        value\n      }\n    } = _ref4;\n    return { ...state,\n      [key]: value // 특정 key 값을 업데이트\n\n    };\n  },\n  [WRITE_POST]: state => ({ ...state,\n    // post와 postError를 초기화\n    post: null,\n    postError: null\n  }),\n  // 포스트 작성 성공\n  [WRITE_POST_SUCCESS]: (state, _ref5) => {\n    let {\n      payload: post\n    } = _ref5;\n    return { ...state,\n      post\n    };\n  },\n  // 포스트 작성 실패\n  [WRITE_POST_FAILURE]: (state, _ref6) => {\n    let {\n      payload: postError\n    } = _ref6;\n    return { ...state,\n      postError\n    };\n  }\n}, initialState);\nexport default write;","map":{"version":3,"names":["createAction","handleActions","createRequestSaga","createRequestActionTypes","postsAPI","takeLatest","INITIALIZE","CHANGE_FIELD","WRITE_POST","WRITE_POST_SUCCESS","WRITE_POST_FAILURE","CATEGORY","CATEGORY_SUCCESS","CATEGORY_FAILURE","initialize","changeField","key","value","writePost","post_title","post_contents","post_category","post_mission","category","writePostSaga","categorySaga","categoryPost","writeSaga","initialState","post","postError","write","state","payload"],"sources":["D:/GitHub/Capstone/eco-project/frontend/src/modules/write.js"],"sourcesContent":["import { createAction, handleActions } from \"redux-actions\";\r\nimport createRequestSaga, { createRequestActionTypes } from \"../lib/createRequestSaga\";\r\nimport * as postsAPI from '../lib/api/post';\r\nimport { takeLatest } from 'redux-saga/effects';\r\n\r\nconst INITIALIZE = 'write/INITIALIZE'; // 모든 내용 초기화\r\nconst CHANGE_FIELD = 'write/CHANGE_FIELD'; // 특정 key 값 바꾸기\r\nconst [\r\n  WRITE_POST,\r\n  WRITE_POST_SUCCESS,\r\n  WRITE_POST_FAILURE,\r\n] = createRequestActionTypes('write/WRITE_POST'); // 포스트 작성\r\nconst [\r\n  CATEGORY, \r\n  CATEGORY_SUCCESS, \r\n  CATEGORY_FAILURE\r\n] = createRequestActionTypes('write/CATEGORY');//카테고리 조회\r\n\r\nexport const initialize = createAction(INITIALIZE);\r\nexport const changeField = createAction(CHANGE_FIELD, ({ key, value }) => ({\r\n  key,\r\n  value,\r\n}));\r\nexport const writePost = createAction(WRITE_POST, ({ post_title, post_contents,post_category, post_mission }) => ({\r\n  post_title,\r\n  post_contents,\r\n  post_category,\r\n  post_mission\r\n}));\r\nexport const category = createAction(CATEGORY,({})=>({}));\r\n\r\n// 사가 생성\r\nconst writePostSaga = createRequestSaga(WRITE_POST, postsAPI.writePost);\r\nconst categorySaga = createRequestSaga(CATEGORY, postsAPI.categoryPost);\r\nexport function* writeSaga() {\r\n  yield takeLatest(CATEGORY, categorySaga);\r\n  yield takeLatest(WRITE_POST, writePostSaga);\r\n}\r\n\r\n\r\n\r\n\r\nconst initialState = {\r\n  post_title: '',\r\n  post_contents: '',\r\n  post_category: '',\r\n  post_mission:'',\r\n  post: null,\r\n  postError: null,\r\n};\r\n\r\nconst write = handleActions(\r\n  {\r\n    [INITIALIZE]: state => initialState, // initialState를 넣으면 초기 상태로 바뀜\r\n    [CHANGE_FIELD]: (state, { payload: { key, value } }) => ({\r\n      ...state,\r\n      [key]: value, // 특정 key 값을 업데이트\r\n    }),\r\n    [WRITE_POST]: state => ({\r\n      ...state,\r\n      // post와 postError를 초기화\r\n      post: null,\r\n      postError: null,\r\n    }),\r\n    // 포스트 작성 성공\r\n    [WRITE_POST_SUCCESS]: (state, { payload: post }) => ({\r\n      ...state,\r\n      post,\r\n    }),\r\n    // 포스트 작성 실패\r\n    [WRITE_POST_FAILURE]: (state, { payload: postError }) => ({\r\n      ...state,\r\n      postError,\r\n    }),\r\n  },\r\n  initialState,\r\n)\r\n\r\nexport default write;"],"mappings":"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"},"metadata":{},"sourceType":"module"}