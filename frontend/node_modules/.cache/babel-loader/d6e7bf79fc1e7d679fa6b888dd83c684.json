{"ast":null,"code":"import { createAction, handleActions } from \"redux-actions\";\nimport createRequestSaga, { createRequestActionTypes } from \"../lib/createRequestSaga\";\nimport * as postsAPI from '../lib/api/post';\nimport { takeLatest } from 'redux-saga/effects';\nconst INITIALIZE = 'write/INITIALIZE'; // 모든 내용 초기화\n\nconst CHANGE_FIELD = 'write/CHANGE_FIELD'; // 특정 key 값 바꾸기\n\nconst [WRITE_POST, WRITE_POST_SUCCESS, WRITE_POST_FAILURE] = createRequestActionTypes('write/WRITE_POST'); // 포스트 작성\n\nconst [CATEGORYS, CATEGORYS_SUCCESS, CATEGORYS_FAILURE] = createRequestActionTypes('write/CATEGORY'); //카테고리 조회\n\nconst [MISSIONS, MISSIONS_SUCCESS, MISSIONS_FAILURE] = createRequestActionTypes('write/MISSION'); //카테고리 조회\n\nexport const initialize = createAction(INITIALIZE);\nexport const changeField = createAction(CHANGE_FIELD, _ref => {\n  let {\n    key,\n    value\n  } = _ref;\n  return {\n    key,\n    value\n  };\n});\nexport const writePost = createAction(WRITE_POST, _ref2 => {\n  let {\n    post_title,\n    post_contents,\n    post_category,\n    post_mission\n  } = _ref2;\n  return {\n    post_title,\n    post_contents,\n    post_category,\n    post_mission\n  };\n});\nexport const categorys = createAction(CATEGORYS);\nexport const missions = createAction(MISSIONS); // 사가 생성\n\nconst writePostSaga = createRequestSaga(WRITE_POST, postsAPI.writePost);\nconst categorysSaga = createRequestSaga(CATEGORYS, postsAPI.categorysPost);\nconst missionsSaga = createRequestSaga(MISSIONS, postsAPI.missionsPost);\nexport function* writeSaga() {\n  yield takeLatest(CATEGORYS, categorysSaga);\n  yield takeLatest(MISSIONS, missionsSaga);\n  yield takeLatest(WRITE_POST, writePostSaga);\n}\nconst initialState = {\n  post_title: '',\n  post_contents: '',\n  post_category: '',\n  post_mission: '',\n  categorys: [],\n  categorysError: null,\n  missions: [],\n  missionError: null,\n  post: null,\n  postError: null\n};\nconst write = handleActions({\n  [INITIALIZE]: state => initialState,\n  // initialState를 넣으면 초기 상태로 바뀜\n  [CHANGE_FIELD]: (state, _ref3) => {\n    let {\n      payload: {\n        key,\n        value\n      }\n    } = _ref3;\n    return { ...state,\n      [key]: value // 특정 key 값을 업데이트\n\n    };\n  },\n  [WRITE_POST]: state => ({ ...state,\n    // post와 postError를 초기화\n    categorys: null,\n    categorysError: null,\n    missions: null,\n    missionsError: null,\n    post: null,\n    postError: null\n  }),\n  // 포스트 작성 성공\n  [WRITE_POST_SUCCESS]: (state, _ref4) => {\n    let {\n      payload: post\n    } = _ref4;\n    return { ...state,\n      post\n    };\n  },\n  // 포스트 작성 실패\n  [WRITE_POST_FAILURE]: (state, _ref5) => {\n    let {\n      payload: postError\n    } = _ref5;\n    return { ...state,\n      postError\n    };\n  },\n  [CATEGORYS]: state => ({ ...state,\n    // post와 postError를 초기화\n    categorys: [],\n    categorysError: null,\n    missions: [],\n    missionsError: null,\n    post: null,\n    postError: null\n  }),\n  // 포스트 작성 성공\n  [CATEGORYS_SUCCESS]: (state, _ref6) => {\n    let {\n      payload: categorys\n    } = _ref6;\n    return { ...state,\n      categorys: categorys.result.categorys\n    };\n  },\n  // 포스트 작성 실패\n  [CATEGORYS_FAILURE]: (state, _ref7) => {\n    let {\n      payload: categorysError\n    } = _ref7;\n    return { ...state,\n      categorysError\n    };\n  },\n  [MISSIONS]: state => ({ ...state,\n    // post와 postError를 초기화\n    categorys: null,\n    categorysError: null,\n    missions: null,\n    missionsError: null,\n    post: null,\n    postError: null\n  }),\n  // 포스트 작성 성공\n  [MISSIONS_SUCCESS]: (state, _ref8) => {\n    let {\n      payload: missions\n    } = _ref8;\n    return { ...state,\n      categorys: missions.result.missions\n    };\n  },\n  // 포스트 작성 실패\n  [MISSIONS_FAILURE]: (state, _ref9) => {\n    let {\n      payload: missionsError\n    } = _ref9;\n    return { ...state,\n      missionsError\n    };\n  }\n}, initialState);\nexport default write;","map":{"version":3,"names":["createAction","handleActions","createRequestSaga","createRequestActionTypes","postsAPI","takeLatest","INITIALIZE","CHANGE_FIELD","WRITE_POST","WRITE_POST_SUCCESS","WRITE_POST_FAILURE","CATEGORYS","CATEGORYS_SUCCESS","CATEGORYS_FAILURE","MISSIONS","MISSIONS_SUCCESS","MISSIONS_FAILURE","initialize","changeField","key","value","writePost","post_title","post_contents","post_category","post_mission","categorys","missions","writePostSaga","categorysSaga","categorysPost","missionsSaga","missionsPost","writeSaga","initialState","categorysError","missionError","post","postError","write","state","payload","missionsError","result"],"sources":["D:/GitHub/Capstone/eco-project/frontend/src/modules/write.js"],"sourcesContent":["import { createAction, handleActions } from \"redux-actions\";\r\nimport createRequestSaga, { createRequestActionTypes } from \"../lib/createRequestSaga\";\r\nimport * as postsAPI from '../lib/api/post';\r\nimport { takeLatest } from 'redux-saga/effects';\r\n\r\nconst INITIALIZE = 'write/INITIALIZE'; // 모든 내용 초기화\r\nconst CHANGE_FIELD = 'write/CHANGE_FIELD'; // 특정 key 값 바꾸기\r\nconst [\r\n  WRITE_POST,\r\n  WRITE_POST_SUCCESS,\r\n  WRITE_POST_FAILURE,\r\n] = createRequestActionTypes('write/WRITE_POST'); // 포스트 작성\r\nconst [\r\n  CATEGORYS, \r\n  CATEGORYS_SUCCESS, \r\n  CATEGORYS_FAILURE\r\n] = createRequestActionTypes('write/CATEGORY');//카테고리 조회\r\nconst [\r\n  MISSIONS, \r\n  MISSIONS_SUCCESS, \r\n  MISSIONS_FAILURE\r\n] = createRequestActionTypes('write/MISSION');//카테고리 조회\r\n\r\nexport const initialize = createAction(INITIALIZE);\r\nexport const changeField = createAction(CHANGE_FIELD, ({ key, value }) => ({\r\n  key,\r\n  value,\r\n}));\r\nexport const writePost = createAction(WRITE_POST, ({ post_title, post_contents,post_category, post_mission }) => ({\r\n  post_title,\r\n  post_contents,\r\n  post_category,\r\n  post_mission\r\n}));\r\nexport const categorys = createAction(CATEGORYS);\r\nexport const missions = createAction(MISSIONS);\r\n// 사가 생성\r\nconst writePostSaga = createRequestSaga(WRITE_POST, postsAPI.writePost);\r\nconst categorysSaga = createRequestSaga(CATEGORYS, postsAPI.categorysPost);\r\nconst missionsSaga = createRequestSaga(MISSIONS, postsAPI.missionsPost);\r\nexport function* writeSaga() {\r\n  yield takeLatest(CATEGORYS, categorysSaga);\r\n  yield takeLatest(MISSIONS, missionsSaga);\r\n  yield takeLatest(WRITE_POST, writePostSaga);\r\n}\r\n\r\n\r\n\r\n\r\nconst initialState = {\r\n  post_title: '',\r\n  post_contents: '',\r\n  post_category: '',\r\n  post_mission:'',\r\n  categorys:[],\r\n  categorysError:null,\r\n  missions:[],\r\n  missionError:null,\r\n  post: null,\r\n  postError: null,\r\n};\r\n\r\nconst write = handleActions(\r\n  {\r\n    [INITIALIZE]: state => initialState, // initialState를 넣으면 초기 상태로 바뀜\r\n    [CHANGE_FIELD]: (state, { payload: { key, value } }) => ({\r\n      ...state,\r\n      [key]: value, // 특정 key 값을 업데이트\r\n    }),\r\n    [WRITE_POST]: state => ({\r\n      ...state,\r\n      // post와 postError를 초기화\r\n      categorys:null,\r\n      categorysError:null,\r\n      missions:null,\r\n      missionsError:null,\r\n      post: null,\r\n      postError: null,\r\n    }),\r\n    // 포스트 작성 성공\r\n    [WRITE_POST_SUCCESS]: (state, { payload: post }) => ({\r\n      ...state,\r\n      post,\r\n    }),\r\n    // 포스트 작성 실패\r\n    [WRITE_POST_FAILURE]: (state, { payload: postError }) => ({\r\n      ...state,\r\n      postError,\r\n    }),\r\n    [CATEGORYS]: state => ({\r\n      ...state,\r\n      // post와 postError를 초기화\r\n      categorys:[],\r\n      categorysError:null,\r\n      missions:[],\r\n      missionsError:null,\r\n      post: null,\r\n      postError: null,\r\n    }),\r\n    // 포스트 작성 성공\r\n    [CATEGORYS_SUCCESS]: (state, { payload: categorys }) => ({\r\n      ...state,\r\n      categorys:categorys.result.categorys,\r\n    }),\r\n    // 포스트 작성 실패\r\n    [CATEGORYS_FAILURE]: (state, { payload: categorysError }) => ({\r\n      ...state,\r\n      categorysError,\r\n    }),\r\n    [MISSIONS]: state => ({\r\n      ...state,\r\n      // post와 postError를 초기화\r\n      categorys:null,\r\n      categorysError:null,\r\n      missions:null,\r\n      missionsError:null,\r\n      post: null,\r\n      postError: null,\r\n    }),\r\n    // 포스트 작성 성공\r\n    [MISSIONS_SUCCESS]: (state, { payload: missions }) => ({\r\n      ...state,\r\n      categorys:missions.result.missions,\r\n    }),\r\n    // 포스트 작성 실패\r\n    [MISSIONS_FAILURE]: (state, { payload: missionsError }) => ({\r\n      ...state,\r\n      missionsError,\r\n    }),\r\n\r\n\r\n  },\r\n  initialState,\r\n)\r\n\r\nexport default write;"],"mappings":"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"},"metadata":{},"sourceType":"module"}