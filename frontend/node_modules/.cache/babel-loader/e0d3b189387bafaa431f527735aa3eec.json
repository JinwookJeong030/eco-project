{"ast":null,"code":"import { createAction, handleActions } from \"redux-actions\";\nimport createRequestSaga, { createRequestActionTypes } from \"../lib/createRequestSaga\";\nimport * as postsAPI from '../lib/api/post';\nimport { takeLatest } from 'redux-saga/effects';\nconst INITIALIZE = 'write/INITIALIZE'; // 모든 내용 초기화\n\nconst CHANGE_FIELD = 'write/CHANGE_FIELD'; // 특정 key 값 바꾸기\n\nconst [LIST_POSTS, LIST_POSTS_SUCCESS, LIST_POSTS_FAILURE] = createRequestActionTypes('posts/LIST_POSTS');\nexport const initialize = createAction(INITIALIZE);\nexport const changeField = createAction(CHANGE_FIELD, _ref => {\n  let {\n    key,\n    value\n  } = _ref;\n  return {\n    key,\n    value\n  };\n});\nexport const listPosts = createAction(LIST_POSTS, _ref2 => {\n  let {\n    search_type,\n    search_contents,\n    page\n  } = _ref2;\n  return {\n    search_type,\n    search_contents,\n    page\n  };\n});\nconst listPostsSaga = createRequestSaga(LIST_POSTS, postsAPI.listPosts);\nexport function* postsSaga() {\n  yield takeLatest(LIST_POSTS, listPostsSaga);\n}\nconst initialState = {\n  search_type: \"title\",\n  search_contents: null,\n  posts: null,\n  error: null\n};\nconst posts = handleActions({\n  [INITIALIZE]: state => initialState,\n  // initialState를 넣으면 초기 상태로 바뀜\n  [CHANGE_FIELD]: (state, _ref3) => {\n    let {\n      payload: {\n        key,\n        value\n      }\n    } = _ref3;\n    return { ...state,\n      [key]: value // 특정 key 값을 업데이트\n\n    };\n  },\n  [LIST_POSTS_SUCCESS]: (state, _ref4) => {\n    let {\n      payload: posts\n    } = _ref4;\n    return { ...state,\n      posts: posts.result.posts\n    };\n  },\n  [LIST_POSTS_FAILURE]: (state, _ref5) => {\n    let {\n      payload: error\n    } = _ref5;\n    return { ...state,\n      error\n    };\n  }\n}, initialState);\nexport default posts;","map":{"version":3,"names":["createAction","handleActions","createRequestSaga","createRequestActionTypes","postsAPI","takeLatest","INITIALIZE","CHANGE_FIELD","LIST_POSTS","LIST_POSTS_SUCCESS","LIST_POSTS_FAILURE","initialize","changeField","key","value","listPosts","search_type","search_contents","page","listPostsSaga","postsSaga","initialState","posts","error","state","payload","result"],"sources":["D:/GitHub/Capstone/eco-project/frontend/src/modules/posts.js"],"sourcesContent":["import { createAction, handleActions } from \"redux-actions\";\r\nimport createRequestSaga, {\r\n  createRequestActionTypes,\r\n} from \"../lib/createRequestSaga\";\r\nimport * as postsAPI from '../lib/api/post';\r\nimport { takeLatest } from 'redux-saga/effects';\r\n\r\nconst INITIALIZE = 'write/INITIALIZE'; // 모든 내용 초기화\r\n\r\nconst CHANGE_FIELD = 'write/CHANGE_FIELD'; // 특정 key 값 바꾸기\r\n\r\nconst [\r\n  LIST_POSTS,\r\n  LIST_POSTS_SUCCESS,\r\n  LIST_POSTS_FAILURE,\r\n] = createRequestActionTypes('posts/LIST_POSTS');\r\n\r\n\r\n\r\nexport const initialize = createAction(INITIALIZE);\r\n\r\nexport const changeField = createAction(CHANGE_FIELD, ({ key, value }) => ({\r\n  key,\r\n  value,\r\n}));\r\n\r\nexport const listPosts = createAction(\r\n  LIST_POSTS,\r\n  ({ search_type, search_contents, page }) => ({search_type, search_contents, page }),\r\n);\r\n\r\nconst listPostsSaga = createRequestSaga(LIST_POSTS, postsAPI.listPosts);\r\n\r\nexport function* postsSaga() {\r\n  yield takeLatest(LIST_POSTS, listPostsSaga);\r\n}\r\n\r\n\r\n\r\nconst initialState = {\r\n  search_type:\"title\",\r\n  search_contents: null,\r\n  posts: null,\r\n  error: null,\r\n};\r\n\r\nconst posts = handleActions(\r\n  {\r\n    [INITIALIZE]: state => initialState, // initialState를 넣으면 초기 상태로 바뀜\r\n    [CHANGE_FIELD]: (state, { payload: { key, value } }) => ({\r\n      ...state,\r\n      [key]: value, // 특정 key 값을 업데이트\r\n    }),\r\n    [LIST_POSTS_SUCCESS]: (state, { payload: posts }) => ({\r\n      ...state,\r\n      posts: posts.result.posts,\r\n    }),\r\n    [LIST_POSTS_FAILURE]: (state, { payload: error }) => ({\r\n      ...state,\r\n      error,\r\n    }),\r\n  },\r\n  initialState,\r\n);\r\n\r\nexport default posts;"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,aAAvB,QAA4C,eAA5C;AACA,OAAOC,iBAAP,IACEC,wBADF,QAEO,0BAFP;AAGA,OAAO,KAAKC,QAAZ,MAA0B,iBAA1B;AACA,SAASC,UAAT,QAA2B,oBAA3B;AAEA,MAAMC,UAAU,GAAG,kBAAnB,C,CAAuC;;AAEvC,MAAMC,YAAY,GAAG,oBAArB,C,CAA2C;;AAE3C,MAAM,CACJC,UADI,EAEJC,kBAFI,EAGJC,kBAHI,IAIFP,wBAAwB,CAAC,kBAAD,CAJ5B;AAQA,OAAO,MAAMQ,UAAU,GAAGX,YAAY,CAACM,UAAD,CAA/B;AAEP,OAAO,MAAMM,WAAW,GAAGZ,YAAY,CAACO,YAAD,EAAe;EAAA,IAAC;IAAEM,GAAF;IAAOC;EAAP,CAAD;EAAA,OAAqB;IACzED,GADyE;IAEzEC;EAFyE,CAArB;AAAA,CAAf,CAAhC;AAKP,OAAO,MAAMC,SAAS,GAAGf,YAAY,CACnCQ,UADmC,EAEnC;EAAA,IAAC;IAAEQ,WAAF;IAAeC,eAAf;IAAgCC;EAAhC,CAAD;EAAA,OAA6C;IAACF,WAAD;IAAcC,eAAd;IAA+BC;EAA/B,CAA7C;AAAA,CAFmC,CAA9B;AAKP,MAAMC,aAAa,GAAGjB,iBAAiB,CAACM,UAAD,EAAaJ,QAAQ,CAACW,SAAtB,CAAvC;AAEA,OAAO,UAAUK,SAAV,GAAsB;EAC3B,MAAMf,UAAU,CAACG,UAAD,EAAaW,aAAb,CAAhB;AACD;AAID,MAAME,YAAY,GAAG;EACnBL,WAAW,EAAC,OADO;EAEnBC,eAAe,EAAE,IAFE;EAGnBK,KAAK,EAAE,IAHY;EAInBC,KAAK,EAAE;AAJY,CAArB;AAOA,MAAMD,KAAK,GAAGrB,aAAa,CACzB;EACE,CAACK,UAAD,GAAckB,KAAK,IAAIH,YADzB;EACuC;EACrC,CAACd,YAAD,GAAgB,CAACiB,KAAD;IAAA,IAAQ;MAAEC,OAAO,EAAE;QAAEZ,GAAF;QAAOC;MAAP;IAAX,CAAR;IAAA,OAAyC,EACvD,GAAGU,KADoD;MAEvD,CAACX,GAAD,GAAOC,KAFgD,CAEzC;;IAFyC,CAAzC;EAAA,CAFlB;EAME,CAACL,kBAAD,GAAsB,CAACe,KAAD;IAAA,IAAQ;MAAEC,OAAO,EAAEH;IAAX,CAAR;IAAA,OAAgC,EACpD,GAAGE,KADiD;MAEpDF,KAAK,EAAEA,KAAK,CAACI,MAAN,CAAaJ;IAFgC,CAAhC;EAAA,CANxB;EAUE,CAACZ,kBAAD,GAAsB,CAACc,KAAD;IAAA,IAAQ;MAAEC,OAAO,EAAEF;IAAX,CAAR;IAAA,OAAgC,EACpD,GAAGC,KADiD;MAEpDD;IAFoD,CAAhC;EAAA;AAVxB,CADyB,EAgBzBF,YAhByB,CAA3B;AAmBA,eAAeC,KAAf"},"metadata":{},"sourceType":"module"}